a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
# A vector is a basic unit of data structure in R
# All elements in a vector must be of the same type
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
numbers_vector <- c(1, 3, 5, 7, 9, 11)
print(disney_characters)
print(presidents)
print(numbers_vector)
# A list, unlike a vector, can contain various data types
random_list <- list("movies"=c("Star Wars", "Titanic", "Avatar"),
"states"=c("California", "Oklahoma", "Texas", "Virginia"),
"coins"=c("penny", "dime", "nickel", "quarter"),
"first_presidents"=presidents,
"nums"=c(1,2,3,4,5),
"bools"=c(T,F,T,T,T,F)
)
# We can use the bracket notation to access an item in a list:
random_list["states"]
# Call the function with the student vector as an argument.
roll_call(students)
# Part I
students <- c("Abraham","Beatrice","Cory", "Dinah","Eric","Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class {
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
}
roll_call(students)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
precipitation %>% length()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
sample_csv <- read_csv("data.csv")
sample_csv <- read_csv("data.csv")
head(sample_csv)
knitr::opts_chunk$set(echo = TRUE)
slice(diamonds, 3)
slice(diamonds, c(1,7))
select(diamonds, carat, price)
filter(diamonds, cut=='Ideal')
filter(diamonds, (cut=='Ideal' & price > 500))
total_volume <- mutate(diamonds, x * y * z)
total_volume
# In R, variables can contain periods
total.volume2 <- mutate(diamonds, total.volume=(x*y*z))
total.volume2
summarize(diamonds, mean(price))
cut <- group_by(diamonds, cut)
summarize(cut, mean(price), sum(price))
count(diamonds, cut)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("students.csv")
students <-read_csv("students.csv")
library(tidyverse)
students <-read_csv("students.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("students.csv")
head(students)
# unique(dataset, variable) displays unique elements from that column
unique(students$school_name)
school_count <- unique(students$school_name)
# Use length() to identify the number of schools
length(school_count)
paste("There are", length(school_count), "schools")
# nrow() returns the number of rows
student_count <-  nrow(students)
paste("There are a total of", student_count, "students.")
passing_reading <- filter(students, reading_score >= 70)
passing_reading_count <- nrow(passing_reading)
percentage_passing_reading <- passing_reading_count*100 / student_count
percentage_passing_reading <- round(percentage_passing_reading,2)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
school_grouping <- group_by(students, school_name)
summarize(school_grouping, avg.reading=mean(reading_score), avg.math = mean(math_score))
grade_grouping <- group_by(students, school_name, grade)
summarize(grade_grouping, avg.reading=mean(reading_score), avg.math=mean(math_score))
school_grouping <- group_by(students, school_name)
summarize(school_grouping, avg.reading=mean(reading_score), avg.math = mean(math_score))
overall_passing <- filter(students, math_score >= 70 & reading_score >= 70)
overall_passing_count <- nrow(overall_passing)
percentage_passing_overall <- overall_passing_count *100 / student_count
percentage_passing_overall <- round(percentage_passing_overall , 2)
paste(percentage_passing_overall, "% of the students have passing math and reading scores.")
passing_math <- filter(students, math_score >= 70)
passing_math_count <- nrow(passing_math)
percentage_passing_math <- passing_math_count*100 / student_count
percentage_passing_math <- round(percentage_passing_math, 2)
paste(percentage_passing_math, "% of the students have passing math scores.")
passing_reading <- filter(students, reading_score >= 70)
passing_reading_count <- nrow(passing_reading)
percentage_passing_reading <- passing_reading_count*100 / student_count
percentage_passing_reading <- round(percentage_passing_reading,2)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
mean_reading_score <- summarize(students, mean(reading_score))
paste("The average reading score is", mean_reading_score)
mean_math_score <- summarize(students, mean(math_score))
paste("The average math score is", mean_math_score)
# nrow() returns the number of rows
student_count <-  nrow(students)
paste("There are a total of", student_count, "students.")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
demo_table <- read.csv(file= "demo.csv", check.names=F, stringAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
NOTE
library(readr)
demo <- read_csv("01_Demo/demo.csv")
View(demo)
View(demo)
library(jsonlite)
?fromJSON
demo_table2 <- fromJSON(txt='demo.json')
demo_table2 <- fromJSON(txt='demo.json')
demo_table2 <- fromJSON(txt='demo.json')
demo_table2 <- fromJSON(txt='demo.json')
demo_table2 <- fromJSON(txt='demo.json')
library(readr)
demo2 <- read_csv("01_Demo/demo2.csv")
View(demo2)
View(demo2)
View(demo)
View(demo2)
x <- c(3,3,3,2,5,5,8,8,9)
x[3]
demo_table[3,"Year"]
demo_table[3,"Year"]
View(demo)
demo_table[3,"Year"]
> demo_table[3,"Year"]
demo_table[3,"Year"]
demo_table[3,"Year"]
View(demo)
View(demo)
demo_table[3,"Year"]
install.packages("jsonlite")
demo_table[3,"Year"]
View(demo)
> demo_table[3,3]
demo_table$"Vehicle_Class"
library(readr)
demo <- read_csv("01_Demo/demo.csv")
View(demo)
demo_table$"Vehicle_Class"[2]
View(demo2)
View(demo)
library(readr)
demo <- read_csv("01_Demo/demo.csv")
View(demo)
show_col_types = FALSE
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(demo2)
View(demo2)
View(demo)
demo$Vehicle_Class[2]
View(demo2)
filter_demo2 <- subset(demo2, buying_price > 4 & number_of_doors == 2 & safety_rating == 1)
filter_demo2 <- subset(demo2, buying_price > 4 & number_of_doors == 5 & safety_rating == 1)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample_rows <- sample(num_rows, 3)
num_rows <- 1:nrow(demo_table)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo)
sample_rows <- sample(num_rows, 3)
demo[sample(1:nrow(demo), 3),]
demo[sample(1:nrow(demo), 3),]
install.packages.(tidyverse)
install.packages("tidyverse")
install.packages("jsonlite")
library(tidyverse)
?mutate()
library(jsonlite)
demo_table3 <- read.csv('demo.csv' , check.names = F,stringsAsFactors = F)
install.packages("tidyverse")
install.packages("tidyverse")
demo_table3 <- read.csv('demo.csv' , check.names = F,stringsAsFactors = F)
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
```{r}
plt + geom_boxplot()  #add boxplot
library(tidyverse)
head(mpg)
head(mpg)
head(mpg)
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
```
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
```
head(mpg)
setwd("C:/Users/vicae/OneDrive/Desktop/Class Folder_15/MechaCar_Statistical_Analysis")
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
library(tidyverse)
library(dplyr)
MechaCar_df <-read.csv(file"MechaCar_mpg.csv",check.names=F,stringsAsFactors=F)
MechaCar_Table <-read.csv(file"MechaCar_mpg.csv",check.names=F,stringsAsFactors=F)
MechaCar_Table <-read.csv(file="MechaCar_mpg.csv",check.names=F,stringsAsFactors=F)#Import and read in the MechaCar_mpg.csv file as a dataframe.
View(MechaCar_Table)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_Tabl)#Generate multiple linear regression model.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_Table)#Generate multiple linear regression model.
View(MechaCar_Table)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_Table))#Generate summary statistics
